/*!
This file contains light-weight wrappers around tree-sitter nodes for the {{ name }} grammar..
*/

use super::nodes;
use tree_sitter::{Node, Tree};

// ------------------------------------------------------------------------------------------------
// [Public] Macros
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Traits
// ------------------------------------------------------------------------------------------------

pub trait TypedNode<'t, 's> {
    fn from_node(node: Node<'t>, source: &'s [u8]) -> Self
    where
        Self: Sized;
}

pub trait TypedRootNode<'s> {
    fn from_tree(tree: Tree, source: &'s [u8]) -> Self
    where
        Self: Sized;
}

// ------------------------------------------------------------------------------------------------
// Root Node
// ------------------------------------------------------------------------------------------------

{{ root_node }}


// ------------------------------------------------------------------------------------------------
// Compound Nodes
// ------------------------------------------------------------------------------------------------
{% for node in compound_nodes %}
{{ node }}
{% endfor %}

// ------------------------------------------------------------------------------------------------
// Value Nodes
// ------------------------------------------------------------------------------------------------
{% for node in value_nodes %}
value_node!({{ node }});
{% endfor %}
